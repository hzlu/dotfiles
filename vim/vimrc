if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'flazz/vim-colorschemes'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'mhinz/vim-startify'
Plug 'tpope/vim-fugitive'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-surround' " 用法提示：ds cs ysiw yss
Plug 'ctrlpvim/ctrlp.vim'
Plug 'airblade/vim-gitgutter'
Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'
Plug 'honza/vim-snippets'
Plug 'godlygeek/tabular' " 格式化
Plug 'ervandew/supertab'
Plug 'Lokaltog/vim-easymotion'
Plug 'terryma/vim-multiple-cursors'
Plug 'terryma/vim-expand-region'
Plug 'rking/ag.vim'
Plug 'Raimondi/delimitMate' " 补全括号
Plug 'neoclide/coc.nvim', { 'branch': 'release' }
Plug 'junegunn/limelight.vim'
Plug 'junegunn/goyo.vim'
Plug 'Yggdroot/indentLine'
Plug 'sheerun/vim-polyglot' " 语法高亮
call plug#end()

" ------------------------
" 选项设置
" ------------------------
filetype plugin indent on " 根据侦测到不同类型加载对应插件
syntax enable " 开启语法高亮

colorscheme dracula
set background=dark
set t_Co=256 " terminal color 开启 256 色支持

set autowrite " 执行命令前自动保存
set autoread " 文件在vim外修改过，自动重新读入

set backspace=indent,eol,start " 解决退格键无法使用

set flash
set nobackup " 不要备份文件
set nowritebackup
set noswapfile " 不要生成 swap 文件
set nocompatible
set history=200
set shell=/bin/zsh

set cursorline
set cursorcolumn
set confirm

set encoding=utf-8
set helplang=cn
set langmenu=zh_cn
set termencoding=utf-8

set foldmethod=indent
set foldlevel=1 " zr 递减 foldlevel 变量 zm 递增 foldlevel 变量
set foldenable " 启动 vim 时关闭折叠代码

set guifont=Meslo\ LG\ L\ DZ\ Regular\ for\ Powerline:h15
set guioptions-=r " 隐藏滚动条
set guioptions-=L
set guioptions-=b

set wrapscan " 循环搜索开头
set smartcase " 智能大小写搜索
set hlsearch " 高亮显示搜索的内容
set incsearch " 开启实时搜索功能

set list
set listchars=tab:~~,trail:·

set number
set numberwidth=4

set ruler
set laststatus=2 " Always display the status line

set scrolloff=10 " 光标编辑行距离顶部或底部的保留行数
set showcmd
set showmatch
set showmode

set expandtab " 插入空格代替 Tab
set shiftround " 按住 shift 再连按两次 > 或 < 可以整行缩进
set shiftwidth=2
set tabstop=2
set softtabstop=2

set smartindent
set cindent

set splitbelow " 新分割窗口在下边
set splitright " 新分割窗口在右边

set timeoutlen=1000 " <leader> 键响应时间
set textwidth=80 " 每行最大字符数
set nowrap

set completeopt=menu,preview
set omnifunc=syntaxcomplete#Complete " Omni 补全

set wildmenu " 命令行增强模式
set wildmode=list:longest,full

highlight ExtraWhitespace ctermbg=Black


" ------------------------
" 变量设置
" ------------------------
let g:mapleader = ',' " 定义 <leader>

" coc配置
let g:coc_node_path = $HOME."/.nvm/versions/node/v10.16.0/bin/node"

" coc 插件列表
" cos-emmet
" cos-eslint
" cos-highlight
" cos-snippets
" cos-vimlsp
" cos-css
" cos-html
" cos-json
" cos-tsserver
" cos-vetur

" 专注模式 :Goyo :Goyo!
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240
let g:limelight_default_coefficient = 0.7
let g:limelight_priority = -1

let g:polyglot_disabled = ['markdown']

let g:LanguageClient_serverCommands = {
  \ 'vue': ['vls']
  \ }

" 光标形状
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_SR = "\<Esc>]50;CursorShape=2\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

function! TrimWhiteSpace()
  let save_cursor = getpos(".")
  let old_query = getreg('/')
  :%s/\s\+$//e
  call setpos('.', save_cursor)
  call setreg('/', old_query)
endfunction

augroup extraSpace
  autocmd!
  autocmd BufWinEnter * :match ExtraWhitespace /\s\+$/
  autocmd InsertEnter * :match ExtraWhitespace /\s\+\%#\@<!$/
  autocmd InsertLeave * :match ExtraWhitespace /\s\+$/
  autocmd BufWritePre * :call  TrimWhiteSpace()
  autocmd BufWinLeave * :call  clearmatches()
augroup END

augroup reload_vimrc
  autocmd!
  autocmd BufWritePost $MYVIMRC source $MYVIMRC | AirlineRefresh | AirlineToggle | AirlineToggle
augroup END

augroup vimrcEx
  autocmd!
  autocmd BufReadPost *
  \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g`\"" |
  \ endif
augroup END


" ------------------------
" 快捷键
" ------------------------
inoremap jk <Esc>

" 折叠代码
nnoremap <space><space> za
nnoremap <space>o zr
nnoremap <space>c zm

" 快捷方式：窗口跳转
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" buffer 保存关闭
nnoremap <leader>q :q<cr>
nnoremap <leader>w :w<cr>
nnoremap <leader>W :w !sudo tee % > /dev/null<cr>

" 系统剪切板
nnoremap <space>p "+p
vnoremap <space>y "+y

" 匹配高亮
nnoremap -hl :nohlsearch<cr>
nnoremap +hl :set hlsearch<cr>

" 快捷方式：编辑配置文件
nnoremap <leader>ev :e $MYVIMRC<cr>

" 快捷方式切换当前工作路径到打开 buffer 的目录下
nnoremap <leader>cd :cd %:p:h<cr>:pwd<cr>

" buffer 切换
" 显示buffer列表 :ls :buffers
" 切换buffer :b<number> | 之前的buffer :b#
nnoremap <left> :bp<cr>
nnoremap <right> :bn<cr>
nnoremap <leader>bp :bp<cr>
nnoremap <leader>bn :bn<cr>
nnoremap <leader>bd :bdelete<cr>
nnoremap <leader>ba :bufdo :bdelete<cr>

" Tab 操作
nnoremap <leader>tt :tabnew<cr>
nnoremap <leader>tp :tabprevious<cr>
nnoremap <leader>tn :tabnext<cr>
nnoremap <leader>to :tabonly<cr>
nnoremap <leader>tc :tabclose<cr>
nnoremap <leader>tm :tabmove

" coc 插件映射
nmap [g <Plug>(coc-diagnostic-prev)
nmap ]g <Plug>(coc-diagnostic-next)
nmap gd <Plug>(coc-definition)
nmap gy <Plug>(coc-type-definition)
nmap gi <Plug>(coc-implementation)
nmap gr <Plug>(coc-references)
imap <c-j> <Plug>(coc-snippets-expand)


" ------------------------
" 使用标记m | 查看标记 :marks | 删除标记 :delmarks <m> | 删除所有标记 :delmarks!
" ma 创建缓冲区标记 | 'a 跳转到标记行首 | `a 跳转到标记字符
" mA 创建夸区标记   | 'A 跳转到标记

" 跳转表 :jumps | 清空跳转表 :clearjumps
" <c-o> 跳转到上一个位置 | <c-i> 跳转到下一个位置

" 变更表 :changes
" g; 跳转到上次变更位置 | g, 跳转到下一个变更位置

" quickfix 窗口
" :cw 打开窗口（当有错误信息时）| :copen 打开窗口
" :cl 列出所有错误 | :cc 显示错误信息 | :cn 下一个错误 | :cp 上一个错误
" ------------------------


" ------------------------
" 插件配置
" ------------------------
if isdirectory(expand("~/.vim/plugged/vim-fugitive"))
  nnoremap <leader>gs :Gstatus<cr>
  nnoremap <leader>gd :Gdiff<cr>
  nnoremap <leader>gl :Glog<cr>
  nnoremap <leader>gb :Gblame<cr>
  nnoremap <leader>gc :Gcommit<cr>
endif

if isdirectory(expand("~/.vim/plugged/nerdtree"))
  nnoremap nt :NERDTreeToggle<cr>
  function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
    exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
    exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
  endfunction
  call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
  call NERDTreeHighlightFile('ts', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('vue', 'Red', 'none', '#ffa500', '#151515')
  let NERDTreeWinSize = 50 " 设置 NERDTree 子窗口宽度
  let NERDTreeChDirMode = 2 " 是否改变 CWD { 0: 不改变, 1: change when NERD tree is first loaded, 2: always change }
  let NERDTreeMinimalUI = 1 " 不显示帮助信息
  let NERDTreeShowHidden = 1 " 显示隐藏文件
  let NERDTreeShowBookmarks = 0 " 不显示书签
  let NERDTreeAutoDeleteBuffer = 1 " 删除文件时自动删除文件对应的buffer
  let NERDTreeWinPos = 'left' " 子窗口位置
  let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$', '.keep', '.DS_Store', '\.git$', '.routes']
endif

if isdirectory(expand("~/.vim/plugged/ctrlp.vim"))
  " c-f c-b 模式切换 c-r 正则匹配模式
  let g:ctrlp_map = '<c-p>'
  let g:ctrlp_max_height = 15
  let g:ctrlp_mruf_max = 100
  let g:ctrlp_follow_symlinks = 1
  let g:ctrlp_match_window_bottom = 1
  let g:ctrlp_working_path_mode = 'r'
  let g:ctrlp_match_window_reversed = 0 " Sort the list top to bottom
  let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
    \ }
  set wildignore+=*/tmp/*,*.so,*.swp,*.zip " vim 自带 exclude files
endif

if isdirectory(expand("~/.vim/plugged/vim-gitgutter"))
  set updatetime=250
  nmap ]h <Plug>(GitGutterNextHunk)
  nmap [h <Plug>(GitGutterPrevHunk)
  nmap <leader>hs <Plug>(GitGutterStageHunk)
  nmap <leader>hu <Plug>(GitGutterUndoHunk)
  nmap <leader>hv <Plug>(GitGutterPreviewHunk)
endif

" 用法：[注释行数]<leader> cc: comment out the current line
" c<space>: toggle comment
" 多行注释 cm: minimal comment, cs: sexy comment, cy: comment and yank
" c$: EOL comment
" cA: append comment
" cu: uncomment
if isdirectory(expand("~/.vim/plugged/nerdcommenter"))
  let g:NERDSpaceDelims = 1 " 在注释符默认添加空格
  let g:NERDCompactSexyComs = 1 " 使用紧凑语法美化多行注释
  let g:NERDDefaultAlign = 'left' " 将行注释符左对齐而不是下面的代码缩进
  let g:NERDAltDelims_java = 1   " 设置语言默认使用备用定界符
  let g:NERDCommentEmptyLines = 1 " 允许注释和转换空行（注释区域时有用）
  let g:NERDTrimTrailingWhitespace = 1 " 启用时修整尾随空格注释
endif

if isdirectory(expand('~/.vim/plugged/vim-airline'))
  " let g:airline_theme = 'fruit_punch'
  let g:airline_powerline_fonts = 1

  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#tab_nr_type = 2
  let g:airline#extensions#tabline#show_tab_nr = 0 " 不显示tab number
  let g:airline#extensions#tabline#show_tab_type = 1 " 显示tab type
  let g:airline#extensions#tabline#formatter = "unique_tail"
  " let g:airline#extensions#tabline#formatter = 'short_path'
  let g:airline#extensions#tabline#show_buffers = 1
  let g:airline#extensions#tabline#buffer_nr_show = 1 " 显示buffer number

  let g:airline#extensions#coc#enabled = 1
endif

" Running :Tab /= 或 :Tab /=\zs
" Running :Tab /: 或 :Tab /:\zs
if isdirectory(expand("~/.vim/plugged/tabular"))
  nnoremap <leader>a= :Tabularize /=<cr>
  vnoremap <leader>a= :Tabularize /=<cr>
  nnoremap <leader>a: :Tabularize /:\zs<cr>
  vnoremap <leader>a: :Tabularize /:\zs<cr>
endif

if isdirectory(expand('~/.vim/plugged/supertab'))
  let g:SuperTabDefaultCompletionType = "<c-n>"
endif

if isdirectory(expand('~/.vim/plugged/vim-multiple-cursors'))
  let g:multi_cursor_use_default_mapping = 1 " 默认映射
  let g:multi_cursor_start_word_key      = "<c-n>"
  let g:multi_cursor_select_all_word_key = "<c-m><c-n>"
  let g:multi_cursor_start_key           = "g<c-n>"
  let g:multi_cursor_select_all_key      = "g<c-m><c-n>"
  let g:multi_cursor_next_key            = "<c-n>"
  let g:multi_cursor_prev_key            = "<c-p>"
  let g:multi_cursor_skip_key            = "<c-x>"
  let g:multi_cursor_quit_key            = "<Esc>"
endif

" Requires the_silver_searcher!
" RUNING :Ag [options] {pattern} [{directory}]
" e 打开文件并关闭窗口 | o 打开文件 | go 静默打开 | q 关闭窗口
" t 在新tab打开 | T 在新tab静默打开
" h 水平切分打开 | H 水平静默打开
" v 垂直切分打开 | gv 静默打开
if executable('ag')
  let g:ag_highlight = 1
  let g:ag_working_path_mode = 'r'
  let g:ag_prg = 'ag --vimgrep --smart-case --silent --stats
    \ --ignore .git
    \ --ignore .svn
    \ --ignore .hg
    \ --ignore .DS_Store
    \ --ignore .log
    \ --ignore .min.js
    \ --ignore node_modules/
    \ --ignore tmp/
    \ --ignore log/
    \ --ignore vendor/
    \ --ignore public/
    \ --ignore dist/'
  let g:ctrlp_user_command = 'ag %s -i --hidden
    \ --ignore .git
    \ --ignore .svn
    \ --ignore .hg
    \ --ignore .DS_Store
    \ --ignore .log
    \ --ignore .min.js
    \ --ignore public/
    \ --ignore dist/
    \ --ignore distribution/
    \ -g ""'
  let g:ctrlp_use_caching = 0
  nnoremap AG :Ag! "\b<c-R><c-W>\b"<cr>:cw<cr>
  nnoremap ag :Ag!<SPACE>
endif
