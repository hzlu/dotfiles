" VIMRC FILE BY HZLU
" Usage:
" Run: git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
" Run: vim +PluginInstall +qall

set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'flazz/vim-colorschemes'
Plugin 'dracula/vim'
Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-surround'                     " 用法提示：ds cs ysiw yss
Plugin 'scrooloose/syntastic'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'airblade/vim-gitgutter'
" Plugin 'majutsushi/tagbar'
Plugin 'scrooloose/nerdcommenter'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'honza/vim-snippets'
Plugin 'SirVer/ultisnips'
Plugin 'godlygeek/tabular'                      " 格式化
Plugin 'mattn/emmet-vim'
" Plugin 'tpope/vim-repeat'
Plugin 'ervandew/supertab'
Plugin 'Lokaltog/vim-easymotion'
" Plugin 'tpope/vim-endwise'                      " 补 end
Plugin 'terryma/vim-multiple-cursors'           " 多处编辑
Plugin 'terryma/vim-expand-region'
Plugin 'rking/ag.vim'
Plugin 'vim-scripts/ctags.vim'
Plugin 'Raimondi/delimitMate'                   " 补全括号
Plugin 'Valloric/YouCompleteMe'
" Plugin 'Shougo/neocomplete.vim'
Plugin 'moll/vim-bbye'
Plugin 'junegunn/gv.vim'
" 语言相关
Plugin 'pangloss/vim-javascript'
" Plugin 'tpope/vim-rails'
" Plugin 'vim-ruby/vim-ruby'
" Plugin 'tpope/vim-bundler'
" Plugin 'slim-template/vim-slim'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'ap/vim-css-color' " 显示颜色
Plugin 'othree/html5.vim'
Plugin 'posva/vim-vue' " 前置安装 npm i -g eslint eslint-plugin-vue
" Plugin 'plasticboy/vim-markdown'
" Plugin 'suan/vim-instant-markdown' " 需要安装 npm i -g instant-markdown-d
Plugin 'Yggdroot/indentLine'
call vundle#end()

filetype plugin indent on                       " 根据侦测到不同类型加载对应插件
syntax enable                                   " 开启语法高亮
colorscheme dracula                             " 外观配置
set guifont=Meslo\ LG\ L\ DZ\ Regular\ for\ Powerline:h15
set guioptions=
set t_Co=256                                    " terminal color 开启 256 色支持
set background=dark
" 光标形状
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_SR = "\<Esc>]50;CursorShape=2\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
let mapleader=','                               " 定义 <Leader>
set timeoutlen=1000                             " <Leader> 键响应时间
set history=500                                 " history 选项必须在 nocompatible 选项后；history 文件记录行数
set shell=/bin/zsh
set nobackup                                    " 不要备份文件
set nowritebackup
set noswapfile                                  " 不要生成 swap 文件
set autowrite                                   " 执行命令前自动保存
set autoread                                    " 文件在vim外修改过，自动重新读入
set confirm                                     " 处理未保存或只读文件时弹出确认
set cursorline
hi cursorline term=bold cterm=bold
set cursorcolumn
set textwidth=100                               " 每行最大字符数
let &colorcolumn="80,".join(range(100,999),",")
set showtabline=1                               " 显示标签页
set number numberwidth=4                        " 显示行号，行号宽度
set linespace=0
set scrolloff=10                                " 光标编辑行距离顶部或底部的保留行数
set ruler                                       " 在屏幕下方显示标尺
set showcmd                                     " 屏幕右下角显示未完成的指令输入
set tabstop=2                                   " 两空格代替 Tab
set softtabstop=2
set expandtab                                   " 插入空格代替 Tab
set shiftwidth=2
set shiftround                                  " 按住 shift 再连按两次 > 或 < 可以整行缩进
set splitbelow                                  " 新分割窗口在下边
set splitright                                  " 新分割窗口在右边
" 语言编码相关
set langmenu=zh_cn
set helplang=cn
set encoding=utf-8
set termencoding=utf-8
" set fileencodings=utf-8,gb18030,gbk,big5,gb2312
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set backspace=indent,eol,start
" 搜索相关
set incsearch                                   " 开启实时搜索功能
set wrapscan                                    " 循环搜索开头
set hlsearch                                    " 高亮显示搜索的内容
hi Search cterm=NONE ctermfg=white ctermbg=red guifg=white guibg=red
set smartcase                                   " 智能大小写搜索
" 缩进折叠
set autoindent
set foldmethod=indent
set foldlevel=99 " zr 递减 foldlevel 变量 zm 递增 foldlevel 变量
set nofoldenable                              " 启动 vim 时关闭折叠代码
" miscellaneous
" set matchpairs+=<:>,《:》,“:”,‘:’               " 匹配符号之间跳转，使用 % 跳转
set wildmenu                                    " 在命令模式下使用 <Tab> 自动补全使用一个漂亮的单行菜单显示
set wildmode=list:longest,list:full
set completeopt=longest,menu
set omnifunc=syntaxcomplete#Complete            " Omni 补全
" 处理行末空白字符
set list listchars=tab:~~,trail:·
highlight ExtraWhitespace ctermbg=black

function! TrimWhiteSpace()
  let save_cursor = getpos(".")
  let old_query = getreg('/')
  :%s/\s\+$//e
  call setpos('.', save_cursor)
  call setreg('/', old_query)
endfunction

augroup extraSpace
  autocmd!
  autocmd BufWinEnter * :match ExtraWhitespace /\s\+$/
  autocmd InsertEnter * :match ExtraWhitespace /\s\+\%#\@<!$/
  autocmd InsertLeave * :match ExtraWhitespace /\s\+$/
  autocmd BufWritePre * :call  TrimWhiteSpace()
  autocmd BufWinLeave * :call  clearmatches()
augroup END

" 折叠代码
nnoremap <space><space> za
" 递减foldlevel变量
nnoremap <space>o zr
" 递增foldlevel变量
nnoremap <space>c zm
" 快捷方式：窗口跳转
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
" ctrl W = 重置窗口大小
" ctrl W +/- 调整窗口高
" ctrl W >/< 调整窗口宽
" ctrl W _ 设置窗口高
" ctrl W | 设置窗口宽

" buffer 保存关闭
nnoremap <leader>q :q<CR>
nnoremap <leader>w :w<CR>
nnoremap <Leader>W :w !sudo tee % > /dev/null<CR>
" 快捷方式：从剪切板粘贴
nnoremap <space>p "+p
" 快捷方式：复制到剪切板
vnoremap <space>y "+y
" buffer 切换
nnoremap <left> :bp<CR>
nnoremap <right> :bn<CR>
nnoremap K :bn<CR>
nnoremap <Leader><Leader> <C-^>
" 关闭匹配高亮
nnoremap -hl :nohlsearch<cr>
" 打开匹配高亮
nnoremap +hl :set hlsearch<cr>
inoremap jk <Esc>
inoremap JK <Esc>
" 快捷方式：编辑配置文件
nnoremap <Leader>ev :e $MYVIMRC<CR>
" 快捷方式切换当前工作路径到打开 buffer 的目录下
nnoremap <leader>cd :cd %:p:h<cr>:pwd<cr>

" Tab 操作
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove

augroup reload_vimrc " {
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC | AirlineRefresh | AirlineToggle | AirlineToggle
augroup END " }

augroup vimrcEx
  autocmd!
  autocmd BufReadPost *
  \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g`\"" |
  \ endif
  " autocmd BufWritePost $MYVIMRC source $MYVIMRC " 让配置更改立即生效
  " autocmd FileType ruby,eruby              set omnifunc=rubycomplete#Complete
  " autocmd FileType javascript,coffee       set omnifunc=javascriptcomplete#CompleteJS
  " autocmd FileType css,sass,scss           set omnifunc=csscomplete#CompleteCSS
  " autocmd FileType html                    set omnifunc=htmlcomplete#CompleteTags
  " autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
  " autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
  " autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
  " autocmd FileType ruby,eruby let g:rubycomplete_include_object = 1
  " autocmd FileType ruby,eruby let g:rubycomplete_include_objectspace = 1
  autocmd FileType css,scss,html,javascript set iskeyword+=-
  autocmd BufRead,BufNewFile *.scss set filetype=scss.css
  " autocmd FileType ruby map <F9> :w<CR>:!ruby -c %<CR>
  " autocmd BufRead,BufWritePre *.html :normal gg=G
  autocmd BufNewFile,BufRead *.wxml set filetype=html
  autocmd BufNewFile,BufRead *.pug set filetype=html
  autocmd BufNewFile,BufRead *.wxss set filetype=css
  autocmd BufNewFile,BufRead *.wxs set filetype=javascript
  autocmd BufNewFile,BufRead *.ts set filetype=typescript
  autocmd FileType vue syntax sync fromstart
  " autocmd BufEnter * colorscheme dracula
  " autocmd BufEnter *.rb colorscheme railscasts
augroup END


" source $VIM_CONFIG_PATH/general.vimrc
" source $VIM_CONFIG_PATH/keysmap.vimrc
" source $VIM_CONFIG_PATH/ftypes.vimrc


if isdirectory(expand("~/.vim/bundle/vim-fugitive"))
" source $VIM_CONFIG_PATH/fugitive.vimrc
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gl :Glog<CR>
nnoremap <leader>gb :Gblame<CR>
nnoremap <leader>gc :Gcommit<CR>
endif

if isdirectory(expand("~/.vim/bundle/nerdtree"))
  " source $VIM_CONFIG_PATH/nerdtree.vimrc
nnoremap nt :NERDTreeToggle<CR>
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
  exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
  exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction
call NERDTreeHighlightFile('jade'   , 'green'   , 'none' , 'green'   , '#151515')
call NERDTreeHighlightFile('md'     , 'blue'    , 'none' , '#3366FF' , '#151515')
call NERDTreeHighlightFile('yml'    , 'magenta' , 'none' , 'yellow'  , '#E70350')
call NERDTreeHighlightFile('config' , 'yellow'  , 'none' , 'yellow'  , '#151515')
call NERDTreeHighlightFile('conf'   , 'yellow'  , 'none' , 'yellow'  , '#151515')
call NERDTreeHighlightFile('json'   , 'yellow'  , 'none' , 'yellow'  , '#151515')
call NERDTreeHighlightFile('html'   , 'green'   , 'none' , 'green'   , '#04E703')
call NERDTreeHighlightFile('styl'   , 'cyan'    , 'none' , 'cyan'    , '#151515')
call NERDTreeHighlightFile('css'    , 'cyan'    , 'none' , 'cyan'    , '#151515')
call NERDTreeHighlightFile('sass'   , 'cyan'    , 'none' , 'cyan'    , '#151515')
call NERDTreeHighlightFile('scss'   , 'cyan'    , 'none' , 'cyan'    , '#151515')
call NERDTreeHighlightFile('coffee' , 'Red'     , 'none' , 'red'     , '#151515')
call NERDTreeHighlightFile('js'     , 'Red'     , 'none' , '#ffa500' , '#151515')
call NERDTreeHighlightFile('vue'    , 'Red'     , 'none' , '#ffa500' , '#151515')
call NERDTreeHighlightFile('rb'     , 'Magenta' , 'none' , '#ff00ff' , '#151515')
let NERDTreeWinSize=50        " 设置 NERDTree 子窗口宽度
let NERDTreeChDirMode=2        " 是否改变 CWD { 0: 不改变, 1: change when NERD tree is first loaded, 2: always change }
let NERDTreeMinimalUI=1        " 不显示帮助信息
let NERDTreeShowHidden=1       " 显示隐藏文件
let NERDTreeShowBookmarks=0    " 不显示书签
let NERDTreeAutoDeleteBuffer=1 " 删除文件时自动删除文件对应的buffer
let NERDTreeWinPos='right'      " 子窗口位置
let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$', '.keep', '.DS_Store', '\.git$', '.routes']
endif

if isdirectory(expand('~/.vim/bundle/syntastic'))
  " source $VIM_CONFIG_PATH/syntastic.vimrc
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_auto_jump = 1 " 自动跳转到错误处
let g:syntastic_mode_map = {
  \ 'mode': 'active',
  \ 'active_filetypes': ['ruby', 'javascript', 'css', 'sass', 'scss'],
  \ 'passive_filetypes': ['html'] }
" let g:syntastic_javascript_checkers = ['eslint']
endif

if isdirectory(expand("~/.vim/bundle/ctrlp.vim"))
  " source $VIM_CONFIG_PATH/ctrlp.vimrc
" C-f C-b 模式切换 C-r 正则匹配模式
let g:ctrlp_map = '<c-p>'
" let g:ctrlp_cmd = 'CtrlPMRU'
let g:ctrlp_max_height=15
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1
let g:ctrlp_match_window_bottom=1
let g:ctrlp_working_path_mode = 'r'
let g:ctrlp_match_window_reversed=0 " Sort the list top to bottom
let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
      \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
      \ }
set wildignore+=*/tmp/*,*.so,*.swp,*.zip " vim 自带 exclude files
endif

if isdirectory(expand("~/.vim/bundle/vim-gitgutter"))
  " source $VIM_CONFIG_PATH/gitgutter.vimrc
set updatetime=250
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk
nmap <Leader>hs <Plug>GitGutterStageHunk
nmap <Leader>hu <Plug>GitGutterUndoHunk
nmap <Leader>hv <Plug>GitGutterPreviewHunk
endif

if isdirectory(expand('~/.vim/bundle/tagbar'))
  " source $VIM_CONFIG_PATH/tagbar.vimrc
let g:tagbar_compact=1         " 不显示帮助提示
let g:tagbar_left=1            " 右侧打开
let g:tagbar_vertical=0
let g:tagbar_show_visibility=1
let g:tagbar_width=50
let g:tagbar_zoomwidth=0
let g:tagbar_autofocus=1       " 打开聚焦
let g:tagbar_sort=0            " 不排序
" let g:tagbar_autopreview=1   " 显示预览

" Requirements Universal Ctags
" brew tap universal-ctags/universal-ctags
" brew install --HEAD universal-ctags
set tags+=~/.tags/ruby_tags
function! CreateRubyTags()
  execute '!ctags -f ~/.tags/ruby_tags
  \ -R
  \ --languages=ruby
  \ --exclude=.git --exclude=tmp --exclude=public --exclude=app/assets
  \ $(pwd) $(bundle list --paths)'
endfunction
let g:tagbar_type_ruby = {
  \ 'kinds': [
    \ 'm:modules',
    \ 'c:classes',
    \ 'd:describes',
    \ 'C:contexts',
    \ 'f:methods',
    \ 'F:singleton methods'
  \ ]
\ }

" Requirements Universal Ctags
let g:tagbar_type_css = {
\ 'ctagstype': 'Css',
  \ 'kinds': [
      \ 'c:classes',
      \ 's:selectors',
      \ 'i:identities'
  \ ]
\ }

" Install tern_for_vim
" Navigate to the tern folder and execute in the shell, the following command: npm install
" Install ramitos/jsctags
" npm install -g git+https://github.com/ramitos/jsctags.git
" find . -type f -iregex '.*\.js$' -not -path './node_modules/*' -exec jsctags {} -f \; | sed '/^$/d' | sort > js_tags
set tags+=~/.tags/js_tags
function! CreateJSTags()
  execute '!find . -type f -iregex ".*\.js$"
  \ -not -path "./node_modules/*"
  \ -exec jsctags {} -f \; | sed "/^$/d" | sort > ~/.tags/js_tags '
endfunction

let g:tagbar_type_coffee = {
  \ 'ctagstype': 'coffee',
  \ 'kinds': [
    \ 'c:classes',
    \ 'm:methods',
    \ 'f:functions',
    \ 'v:variables',
    \ 'f:fields',
  \ ]
\ }

nnoremap <leader>tb :TagbarToggle<CR>
endif

if isdirectory(expand("~/.vim/bundle/nerdcommenter"))
  " source $VIM_CONFIG_PATH/nerdcommenter.vimrc
" 用法：[注释行数]<Leader> cc: comment out the current line
" c<space>: toggle comment
" 多行注释 cm: minimal comment, cs: sexy comment, cy: comment and yank
" c$: EOL comment
" cA: append comment
" cu: uncomment
let g:NERDSpaceDelims = 1 " 在注释符默认添加空格
let g:NERDCompactSexyComs = 1 " 使用紧凑语法美化多行注释
let g:NERDDefaultAlign = 'left' " 将行注释符左对齐而不是下面的代码缩进
let g:NERDAltDelims_java = 1   " 设置语言默认使用备用定界符
let g:NERDCommentEmptyLines = 1 " 允许注释和转换空行（注释区域时有用）
let g:NERDTrimTrailingWhitespace = 1 " 启用时修整尾随空格注释
let g:NERDCustomDelimiters = { 'js': { 'left': '/**','right': '*/' } } " 添加自定义格式或覆盖默认值。
endif

if isdirectory(expand('~/.vim/bundle/vim-airline'))
  " source $VIM_CONFIG_PATH/airline.vimrc
  set laststatus=2                                          " Always display the status line
  let g:airline_powerline_fonts=1
  let g:airline#extensions#tabline#enabled=1                " enable tabline
  let g:airline_theme='raven'
endif

if isdirectory(expand("~/.vim/bundle/tabular"))
  " source $VIM_CONFIG_PATH/tabular.vimrc
" Running :Tab /= 或 :Tab /=\zs
" Running :Tab /: 或 :Tab /:\zs
nmap <Leader>a=     :Tabularize /=<CR>
vmap <Leader>a=     :Tabularize /=<CR>
nmap <Leader>a:     :Tabularize /:\zs<CR>
vmap <Leader>a:     :Tabularize /:\zs<CR>
endif

if isdirectory(expand('~/.vim/bundle/emmet-vim'))
  " source $VIM_CONFIG_PATH/emmet.vimrc
  " trigger key C-y ,
  let g:user_emmet_mode='a'
  let g:use_emmet_complete_tag=1
  let g:html_indent_tags='li\|p' " Treat <li> and <p> tags like the block tags they are
  let g:user_emmet_install_global = 0
  autocmd FileType html,css,erb,sass,scss,slim,vue EmmetInstall
endif

if isdirectory(expand('~/.vim/bundle/supertab'))
  " source $VIM_CONFIG_PATH/supertab.vimrc
" Tab 补全
let g:SuperTabDefaultCompletionType = "<c-n>"
let g:UltiSnipsExpandTrigger = "<c-j>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
endif

if isdirectory(expand('~/.vim/bundle/vim-multiple-cursors'))
  " source $VIM_CONFIG_PATH/multiple-cursors.vimrc
  function! Multiple_cursors_before()
    if exists(':NeoCompleteLock')==2
      exe 'NeoCompleteLock'
    endif
  endfunction

  function! Multiple_cursors_after()
    if exists(':NeoCompleteUnlock')==2
      exe 'NeoCompleteUnlock'
    endif
  endfunction
  let g:multi_cursor_use_default_mapping=1 " 默认映射
  let g:multi_cursor_start_word_key      = '<C-n>'
  let g:multi_cursor_select_all_word_key = '<C-m><C-n>'
  let g:multi_cursor_start_key           = 'g<C-n>'
  let g:multi_cursor_select_all_key      = 'g<C-m><C-n>'
  let g:multi_cursor_next_key            = '<C-n>'
  let g:multi_cursor_prev_key            = '<C-p>'
  let g:multi_cursor_skip_key            = '<C-x>'
  let g:multi_cursor_quit_key            = '<Esc>'
endif

if executable('ag')
  " source $VIM_CONFIG_PATH/ag.vimrc
" Requires the_silver_searcher
" RUNING :Ag [options] {pattern} [{directory}]
" e    to open file and close the quickfix window
" o    to open (same as enter)
" go   to preview file (open but maintain focus on ag.vim results)
" t    to open in new tab
" T    to open in new tab silently
" h    to open in horizontal split
" H    to open in horizontal split silently
" v    to open in vertical split
" gv   to open in vertical split silently
" q    to close the quickfix window
let g:ag_highlight=1
let g:ag_working_path_mode='r'
let g:ag_prg='ag --vimgrep --smart-case --silent --stats
  \ --ignore .git
  \ --ignore .svn
  \ --ignore .hg
  \ --ignore .DS_Store
  \ --ignore .log
  \ --ignore .min.js
  \ --ignore node_modules/
  \ --ignore tmp/
  \ --ignore log/
  \ --ignore vendor/
  \ --ignore public/
  \ --ignore dist/'
let g:ctrlp_user_command = 'ag %s -i --hidden
  \ --ignore .git
  \ --ignore .svn
  \ --ignore .hg
  \ --ignore .DS_Store
  \ --ignore .log
  \ --ignore .min.js
  \ --ignore public/
  \ --ignore dist/
  \ -g ""'
let g:ctrlp_use_caching = 0
nnoremap AG :Ag! "\b<C-R><C-W>\b"<CR>:cw<CR>
nnoremap ag :Ag!<SPACE>
endif

if isdirectory(expand('~/.vim/bundle/neocomplete.vim'))
  source $VIM_CONFIG_PATH/neocomplete.vimrc
endif

if isdirectory(expand('~/.vim/bundle/YouCompleteMe.vim'))
  " source $VIM_CONFIG_PATH/youcompleteme.vimrc
  " 快速安
  " cd ~/.vim/bundle/YouCompleteMe
  " ./install.py
  " 不再依赖 Tern 引擎，而使用TSServer
  " TSServer 包含在 TypeScript SDK中
  " npm install -g typescript
  " 在项目根目录下建立 jsconfig.json 文件
  " {
  "   "compilerOptions": {
  "     "checkJs": true
  "   }
  " }

" 自动补全配置
let g:ycm_key_list_select_completion = ['<tab>', '<Down>']
let g:ycm_key_list_previous_completion = ['<s-tab>', '<Up>']
let g:ycm_min_num_of_chars_for_completion=2
endif

if isdirectory(expand('~/.vim/bundle/vim-bbye'))
  " source $VIM_CONFIG_PATH/bbye.vimrc
set runtimepath^=~/.vim/bundle/bbye
nnoremap <Leader>bd :Bdelete<CR>
nnoremap <Leader>ba :bufdo :Bdelete<CR>
endif

if isdirectory(expand('~/.vim/bundle/vim-javascript'))
let g:javascript_plugin_jsdoc = 1
let g:javascript_enable_domhtmlcss = 1
" let g:javascript_conceal_function       = "ƒ"
set conceallevel=0
augroup javascript_folding
  au!
  au FileType javascript setlocal foldmethod=syntax
augroup END
endif

if isdirectory(expand('~/.vim/bundle/indentLine'))
endif
